pfx signin password  = > ecodeworld


Scaffold-DbContext "Server=HKHDCDEVSQL01;Database=ECodeWorldV2;Trusted_Connection=True;" 
Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models

Scaffold-DbContext "Server=HKHDCDEVSQL01;Database=ECodeWorldV2;Trusted_Connection=True;"Microsoft.EntityFrameworkCore.SqlServer -OutputDir ../ECodeWorld.Domain.Entities/Models

private readonly string connectionString;
        private readonly TimeSpan cacheTimespan;
        public ECodeWorldContext()
        {
        }

        public ECodeWorldContext(string connectionString, TimeSpan cacheTimespan)
        {
            this.connectionString = connectionString;
            this.cacheTimespan = cacheTimespan;
        }
 protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer(this.connectionString);
            }
        }

/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP 1000 [ID]
      ,[FirstName]
      ,[LastName]
      ,[DisplayName]
      ,[Title]
      ,[Description]
      ,[Keywords]
      ,[Email]
      ,[Phone]
      ,[Mobile]
      ,[AboutMe]
      ,[Banner]
      ,[Logo]
      ,[Icon]
      ,[Avtar]
      ,[UsersID]
  FROM [ECodeWorld].[dbo].[UserProfiles]


   Install-Package Microsoft.EntityFrameworkCore.SqlServer
   Install-Package Microsoft.EntityFrameworkCore.Tools -Version 2.1.3
   Install-Package Microsoft.EntityFrameworkCore.Tools.DotNet -Version 2.0.3 [X]

   Install-Package AutoMapper -Version 7.0.1
   Install-Package Ninject -Version 3.3.4
   Install-Package Autofac -Version 4.8.1

   Install-Package Microsoft.Extensions.Configuration -Version 2.1.1
   Install-Package Microsoft.Extensions.Configuration.Json -Version 2.1.1
   Install-Package Microsoft.Extensions.Configuration.Binder -Version 2.1.1
   Install-Package Microsoft.Extensions.Configuration.Xml -Version 2.1.1
   Install-Package System.Configuration.ConfigurationManager -Version 4.5.0


   
Install-Package MimeMapping -Version 1.0.1.12




   import { CookieStorage, LocalStorage, SessionStorage } from 'ngx-store';
 
export class MySuperComponent {
  // it will be stored under ${prefix}viewCounts name
  @LocalStorage() viewCounts: number = 0;
  // this under name: ${prefix}differentLocalStorageKey
  @LocalStorage('differentLocalStorageKey') userName: string = '';
  // it will be stored under ${prefix}itWillBeRemovedAfterBrowserClose in session storage
  @SessionStorage({key: 'itWillBeRemovedAfterBrowserClose'}) previousUserNames: Array<string> = [];
  // it will be read from cookie 'user_id' (can be shared with backend) and saved to localStorage and cookies after change
  @LocalStorage() @CookieStorage({prefix: '', key: 'user_id'}) userId: string = '';
  // it will be stored in a cookie named ${prefix}user_workspaces for 24 hours
  @CookieStorage({key: 'user_workspaces', expires: new Date(new Date().getTime() + 24 * 60 * 60 * 1000)}) userWorkspaces = [];
 
  constructor() {
    this.viewCounts++;
    this.userName = 'some name stored in localstorage';
    this.previousUserNames.push(this.userName);
    for (let userName of this.previousUserNames) {
      console.log(userName);
    }
    this.previousUserNames.map(userName => userName.split('').reverse().join(''));
  }
}




import { LocalStorage, SharedStorage } from 'ngx-store';
 
export class HomeComponent {
  @SharedStorage() title: string = 'Homepage'; // it will be kept in temp memory until app reload
  @LocalStorage() userNote: string = 'Leave your note here'; // it will be read from and saved to localStorage
 
  constructor() {
    setTimeout(() => {
      console.log('userNote:', this.userNote); // it should be changed after user's visit to NestedComponent
    }, 5000);
  }
}
 
export class NestedComponent {
  @SharedStorage('title') homeTitle: string = '';
  @LocalStorage() protected userNote: string = '';
 
  constructor() {
    console.log('homeTitle:', this.homeTitle); // should print 'Homepage'
    console.log('userNote:', this.userNote); // should print userNote set in HomeComponent
    this.userNote = "You've visited NestedComponent!";
  }
}


https://www.npmjs.com/package/ngx-store

//=====================================
https://www.concretepage.com/angular-2/angular-2-http-get-parameters-headers-urlsearchparams-requestoptions-example

let myParams = new URLSearchParams(); 
myParams.append('names', 'John');
myParams.append('names', 'David'); 

Then query parameter names will be an array. The query string will look like as given below.
?names[]=John&names[]=David 

myParams.set('names', 'Bob'); 
The query string will be as follows.
?names=Bob 


getBooksAfterFilter(catg: string, wtr: string): Observable<Book[]> {
  let myHeaders = new Headers(); 
  myHeaders.set('Content-Type', 'application/json');
  myHeaders.set('Accept', 'text/plain');  
  let myParams = new URLSearchParams();
  myParams.set('category', catg);
  myParams.set('writer', wtr);		
  let options = new RequestOptions({ headers: myHeaders, params: myParams });
  return this.http.get(this.url, options)
	.map(this.extractData)
	.catch(this.handleError);
}

simply making entry in gitignore may not ingore files, you may need to commit it. I used the following method and worked for me
[git rm -r --cached .]
[git add .]
then
[git commit -am "Remove ignored files"]

However this ignore my scripts folder which I included later into repository.


update PostCategories
set [Icon] =LOWER(REPLACE(LTRIM(RTRIM(Category)), ' ', ''))+'.png'